"""–°–µ—Ä–≤–µ—Ä Telegram –±–æ—Ç–∞, –∑–∞–ø—É—Å–∫–∞–µ–º—ã–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ"""
import logging
import os
import aiohttp
# from telegram_bot_calendar import DetailedTelegramCalendar, LSTEP

from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage  # –î–ª—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π

from utils import exceptions
from utils import expenses
from utils.categories import Categories
import output_data
storage = MemoryStorage()

logging.basicConfig(level=logging.INFO)

API_TOKEN =
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)


@dp.message_handler(commands=["start"])
async def send_welcome(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if message.from_user.id == 478916678:
        buttons = ["/–°–µ–≥–æ–¥–Ω—è", "/–ú–µ—Å—è—Ü", "/–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "/–ü–æ—Å–ª–µ–¥–Ω–∏–µ_—Ä–∞—Å—Ö–æ–¥—ã", "/–ü–æ–º–æ—â—å", "/admin"]
    else:
        buttons = ["/–°–µ–≥–æ–¥–Ω—è", "/–ú–µ—Å—è—Ü", "/–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "/–ü–æ—Å–ª–µ–¥–Ω–∏–µ_—Ä–∞—Å—Ö–æ–¥—ã", "/–ü–æ–º–æ—â—å"]
    keyboard.add(*buttons)
    await message.answer("üëã")
    await message.answer(f"‚ù§Ô∏è–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º, {message.from_user.username}‚ù§Ô∏è", reply_markup=keyboard)
    await help(message)


@dp.message_handler(commands=['–ü–æ–º–æ—â—å'])
async def help(message: types.Message):
    await message.answer(
        "üíµ –ë–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ç—Ä–∞—Ç üíµ\n"
        "–ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é —Ç—Ä–∞—Ç—É –¥–µ–Ω–µ–≥\n\n"
        "‚úÖ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –±–æ—Ç—É —Ä–∞—Å—Ö–æ–¥—ã, \n–∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–º–∏\n"
        "–û–Ω –±—É–¥–µ—Ç –≤–µ—Å—Ç–∏ –∑–∞ –≤–∞—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É! \n\n"
        "‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n"
        "–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞\n"
        "–ü—Ä–∏–º–µ—Ä: 100 —Å–ª–∞–¥–æ—Å—Ç–∏\n\n"
        "‚úÖ –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \n/–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ "
        "–í —Å–∫–æ–±–∫–∞—Ö —É–∫–∞–∑–∞–Ω—ã —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–Ω–∏–º–∞–µ—Ç –±–æ—Ç. "
        "–ï—Å–ª–∏ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ, —Ç–æ –±–æ—Ç –æ—Ç–Ω–µ—Å—ë—Ç —Ç—Ä–∞—Ç—É –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '–ü—Ä–æ—á–µ–µ'\n\n"
        "‚úÖ –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Ç—Ä–∞—Ç—É, –Ω–∞–∂–º–∏—Ç–µ\n"
        "/–ü–æ—Å–ª–µ–¥–Ω–∏–µ_—Ä–∞—Å—Ö–æ–¥—ã –ü–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ –∏–∑ 10-—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
        "‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤–∞–∂–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '–°–æ—Ö—Ä–∞–Ω–∏–ª'\n"
        "–ï—Å–ª–∏ –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–µ—Å–ø–æ–ª–µ–∑–Ω—É—é –ø–æ–∫—É–ø–∫—É: 100 —Å–æ—Ö—Ä–∞–Ω–∏–ª\n\n"
        )


@dp.message_handler(lambda message: message.text.startswith('/del'))
async def del_expense(message: types.Message):
    """–£–¥–∞–ª—è–µ—Ç –æ–¥–Ω—É –∑–∞–ø–∏—Å—å –æ —Ä–∞—Å—Ö–æ–¥–µ –ø–æ –µ—ë –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É"""
    row_id = int(message.text[4:])
    expenses.delete_expense(row_id, message.from_user.id)
    await message.answer("üî•")
    answer_message = "–£–¥–∞–ª–∏–ª\n\n"
    await message.answer(answer_message)
    await today_statistics(message)


@dp.message_handler(commands=['–ö–∞—Ç–µ–≥–æ—Ä–∏–∏'])
async def categories_list(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
    categories = Categories().get_all_categories()
    answer_message = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n\n" +\
            ("\n\n ".join([c.name+' ('+", ".join(c.aliases)+')' for c in categories]))
    await message.answer(answer_message)


@dp.message_handler(commands=['–°–µ–≥–æ–¥–Ω—è'])
async def today_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç"""
    today_expenses = expenses.get_today_statistics(message.from_user.id)
    #print(today_expenses)
    if today_expenses[0]:
        answer_message = "üíµ –¢—Ä–∞—Ç—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:  " + "".join(f"{today_expenses[1].amount} —Ä—É–±. üíµ")
        today_expenses_rows = [
            f"{expense.category_name[:1]}  {expense.amount}—Ä  –Ω–∞ {expense.category_name[1:]}"
            for expense in today_expenses[0]]
        answer_message += "\n\n" + "\n\n" \
            .join(today_expenses_rows)
    else:
        answer_message = "üíµ –¢—Ä–∞—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç üíµ"

    if today_expenses[2].amount:
        answer_message += "\n\n ‚úÖ–í—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏: " + "".join(f"{today_expenses[2].amount} —Ä—É–±‚úÖ")
    await message.answer(answer_message)



@dp.message_handler(commands=['–ú–µ—Å—è—Ü'])
async def month_statistics(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    month_expenses = expenses.get_month_statistics(message.from_user.id)
    if month_expenses[0]:
        answer_message = "üíµ –¢—Ä–∞—Ç—ã –∑–∞ –º–µ—Å—è—Ü:  " + "".join(f"{month_expenses[1].amount} —Ä—É–±. üíµ")
        month_expenses_rows = [
            f"{expense.category_name[:1]}  {expense.amount}—Ä  –Ω–∞ {expense.category_name[1:]}"
            for expense in month_expenses[0]]
        answer_message += "\n\n" + "\n\n" \
            .join(month_expenses_rows)
    else:
        answer_message = "üíµ –¢—Ä–∞—Ç –∑–∞ –º–µ—Å—è—Ü –Ω–µ—Ç üíµ"
    if month_expenses[2].amount:
        answer_message += "\n\n ‚úÖ–í—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏: " + "".join(f"{month_expenses[2].amount} —Ä—É–±‚úÖ")
    await message.answer(answer_message)


@dp.message_handler(commands=['–ü–æ—Å–ª–µ–¥–Ω–∏–µ_—Ä–∞—Å—Ö–æ–¥—ã'])
async def list_expenses(message: types.Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö"""
    last_expenses = expenses.last(message.from_user.id)
    if not last_expenses:
        await message.answer("–†–∞—Å—Ö–æ–¥—ã –µ—â—ë –Ω–µ –∑–∞–≤–µ–¥–µ–Ω—ã")
        return

    last_expenses_rows = [
        f"{expense.category_name[0:1]} {expense.amount}—Ä  –Ω–∞ {expense.category_name[1:]} ‚Äî –Ω–∞–∂–º–∏ "
        f"/del{expense.id} –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
        for expense in last_expenses]
    answer_message = "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ç—Ä–∞—Ç—ã:\n\n" + "\n\n"\
            .join(last_expenses_rows)
    await message.answer(answer_message)


# @dp.message_handler(commands=['–î–æ–±–∞–≤–∏—Ç—å_–ö–∞—Ç–µ–≥–æ—Ä–∏—é'])
# async def categories_list(message: types.Message):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤"""
#     if message.from_user.id != "478916678":
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å!")
#
#
#     categories = Categories().get_all_categories()
#     answer_message = "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞—Ç:\n\n" +\
#             ("\n\n ".join([c.name+' ('+", ".join(c.aliases)+')' for c in categories]))
#     await message.answer(answer_message)


@dp.message_handler(commands=['admin'])
async def categories_list(message: types.Message):
    if message.from_user.id == 478916678:
        answer_message = "–†–µ–∂–∏–º –ê–¥–º–∏–Ω–∞ –¥–æ—Å—Ç—É–ø–µ–Ω\n\n"\
                         "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: /users\n \n" \
                         "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: /count"
    else:
        answer_message = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!"
    await message.answer(answer_message)


@dp.message_handler(commands=['users'])
async def categories_list(message: types.Message):
    if message.from_user.id == 478916678:
        answer_message = "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: " + expenses.Users()
    else:
        answer_message = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!"
    await message.answer(answer_message)


@dp.message_handler(commands=['count'])
async def categories_list(message: types.Message):
    if message.from_user.id == 478916678:
        answer_message = "–ó–∞–ø–∏—Å–µ–π: " + expenses.Count()
    else:
        answer_message = "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ!"
    await message.answer(answer_message)


async def add_expense(message: types.Message):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Ä–∞—Å—Ö–æ–¥"""
    try:
        expense = expenses.add_expense(message.text, message.from_user.id)
    except exceptions.NotCorrectMessage as e:
        await message.answer(str(e))
        return
    answer_message = (
        f"–î–æ–±–∞–≤–ª–µ–Ω—ã —Ç—Ä–∞—Ç—ã {expense.amount} —Ä—É–± –Ω–∞ {expense.category_name}.\n\n"
            )
        #f"{expenses.get_today_statistics(message.from_user.id)}\n"
    await message.answer(answer_message)
    await today_statistics(message)

def add_handlers_expence(dp: Dispatcher):
    dp.register_message_handler(add_expense)



@dp.message_handler(commands="random")
async def cmd_random(message: types.Message):
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton(text="–ù–∞–∂–º–∏ –º–µ–Ω—è", callback_data="count"))
    await message.answer("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10", reply_markup=keyboard)


@dp.callback_query_handler(text="random_value")
async def send_random_value(call: types.CallbackQuery):
    await call.message.answer('/users')



# @bot.message_handler(commands=['date'])
# def start(m):
#      calendar, step = DetailedTelegramCalendar().build()
#      bot.send_message(m.chat.id,
#          f"Select {LSTEP[step]}",
#          reply_markup=calendar)
#
#
# @bot.callback_query_handler(func=DetailedTelegramCalendar.func())
# def cal(c):
#      result, key, step = DetailedTelegramCalendar().process(c.data)
#      if not result and key:
#         bot.edit_message_text(f"Select {LSTEP[step]}",
#          c.message.chat.id,
#          c.message.message_id,
#          reply_markup=key)
#      elif result:
#          bot.edit_message_text(f"You selected {result}",
#              c.message.chat.id,
#              c.message.message_id)


if __name__ == '__main__':

    output_data.register_handlers_data(dp)
    add_handlers_expence(dp)
    executor.start_polling(dp, skip_updates=True)
